--------------swf 播放函数整理 ---------------
public function loadXml():void
        {
            testTime = 0;
            oldStudyTime = 0;
            studyTime = 0;
            pageTime = 0;
            maxTime = 0;
            clickCount = 0;
            arrCurProgress = new Array();
            initCurProgress();
            pages = new Array();
            var _local_1:URLRequest = new URLRequest((strBasePath + "eduMall.xml"));
            var _local_2:URLLoader = new URLLoader();
            _local_2.addEventListener(Event.COMPLETE, onXmlLoaded);
            _local_2.addEventListener(IOErrorEvent.IO_ERROR, onXmlIOError);
            _local_2.load(_local_1);
        }
public function init():void
        {
            btn_saveTime.visible = false;
            mc_loading.visible = false;
            txt_pageNum.text = "第0页/共0页";
            sysStatus = STATUS_NOMOVIE;
            isInstructions = false;
            stage.displayState = StageDisplayState.NORMAL;
            btn_pagePrev.addEventListener(MouseEvent.CLICK, onPagePrev);
            btn_pageNext.addEventListener(MouseEvent.CLICK, onPageNext);
            btn_saveTime.addEventListener(MouseEvent.CLICK, onSaveTime);
            btn_screenSwap.addEventListener(MouseEvent.CLICK, onSwapScreen);
            setPageControlerStatus();
            ExternalInterface.addCallback("replay", replay);
            ExternalInterface.addCallback("changeContent", changeContent);
            ExternalInterface.addCallback("faceCheckStart", faceCheckStart);
            ExternalInterface.addCallback("faceCheckDone", faceCheckDone);
            ExternalInterface.addCallback("setHasTest", setHasTest);
            ExternalInterface.addCallback("setFirstTime", setFirstTime);
            ExternalInterface.addCallback("setIntervalTime", setIntervalTime);
            ExternalInterface.addCallback("recoveWindow", recoveWindow);
            ExternalInterface.addCallback("asAlert", myAlert);
            var _local_1:String = this.loaderInfo.parameters["hasTest"];
            if (_local_1 == null)
            {
                bTest = true;
            } else
            {
                _local_1 = _local_1.toLowerCase();
                if (_local_1 == "n")
                {
                    bTest = false;
                } else
                {
                    bTest = true;
                };
            };
            firstTestTime = Number(this.loaderInfo.parameters["firstTime"]);
            if (isNaN(firstTestTime))
            {
                firstTestTime = TEST_DEFAULT_FIRST_TIME;
            } else
            {
                firstTestTime = Math.round(firstTestTime);
                if (firstTestTime <= 0)
                {
                    firstTestTime = TEST_DEFAULT_FIRST_TIME;
                };
            };
            testTimeInterval = Number(this.loaderInfo.parameters["intervalTime"]);
            if (isNaN(testTimeInterval))
            {
                testTimeInterval = TEST_DEFAULT_INTERVAL_TIME;
                firstTestTime = TEST_DEFAULT_FIRST_TIME;
            } else
            {
                testTimeInterval = Math.round(this.loaderInfo.parameters["testTimeInterval"]);
                if (testTimeInterval <= firstTestTime)
                {
                    testTimeInterval = TEST_DEFAULT_INTERVAL_TIME;
                    firstTestTime = TEST_DEFAULT_FIRST_TIME;
                };
            };
            tTips.text = "";
        }
// 获取当前播放进程
public function createStrProgress():String
        {
            var _local_1 = "";
            _local_1 = (_local_1 + getFixedLengthStr(("" + arrCurProgress[0]), 2, "0"));
            _local_1 = (_local_1 + getFixedLengthStr(("" + arrCurProgress[1]), 2, "0"));
            _local_1 = (_local_1 + getFixedLengthStr(("" + arrCurProgress[2]), 2, "0"));
            return ((_local_1 + getFixedLengthStr(("" + arrCurProgress[3]), 3, "0")));
        }
// 修正字符串
public function getFixedLengthStr(_arg_1:String, _arg_2:Number, _arg_3:String):String
        {
            if (_arg_2 <= 0)
            {
                return ("");
            };
            if (_arg_2 <= _arg_1.length)
            {
                return (_arg_1.substr((_arg_1.length - _arg_2)));
            };
            if (_arg_3 == "")
            {
                _arg_3 = "0";
            };
            var _local_4 = "";
			// ceil（Math.ceil 方法）. public static ceil(x:Number) : Number. 
			// 返回指定数字或表达式的上限值。数字的上限值是大于等于该数字的最接近的整数。
			// ceil(12.5)=13
            var _local_5:Number = Math.ceil((_arg_2 / _arg_3.length));
            var _local_6:Number = 0;
            while (_local_6 < _local_5)
            {
                _local_4 = (_local_4 + _arg_3);
                _local_6++;
            };
            _arg_1 = (_local_4 + _arg_1);
            return (_arg_1.substr((_arg_1.length - _arg_2)));
        }
// 数字加密运行，需要用到外部页面的starttime
 public function encrypt(_arg_1:Number):String
        {
            var _local_2 = "ArsNDdeBChqOPSTtuvQREF67GH01KfgLIJwxyzM8iVWmXYjklnopUZc234ab59/=@]]]]";
            var _local_3:String = String(ExternalInterface.call("starttime"));// 读入开始学习时间 加密后的32位长度
			// 举例 _local_3 = "z0 m5 VM Q2 vN Nv ow md UH zJ UV QX W0 6f hC H3";
			// var str:String = "Hello from Paris, Texas!!!"; 
			// trace(str.substr(11,15)); // output: Paris, Texas!!! 
			// trace(str.substring(11,15)); // output: Pari
			// 在 substring() 方法中，第二个参数是子字符串的结尾 处字符的位置（该字符未包含在返回的字符串中）
            var _local_4:String = _local_3.substring(14, 15);	//m	从1开始计算
            var _local_5:String = _local_3.substring(25, 26);	//0
			// 搜索字符串，并返回在调用字符串内 startIndex 位置上或之后找到的 value 的第一个匹配项的位置。
			// 此索引从零开始，这意味着字符串中的第一个字符被视为位于索引 0 而不是索引 1 处。
			// 如果未找到 value，该方法会返回 -1。
            var _local_6:Number = _local_2.indexOf(_local_4);	// 43	// 'm' 在字符串中出现的位置 从0开始，不成功返回-1
            var _local_7:String = _local_2.substring((_local_6 + 1), (_local_6 + 2));
            var _local_8:Number = _local_2.indexOf(_local_5);
            var _local_9:String = _local_2.substring((_local_8 + 1), (_local_8 + 2));
            var _local_10:String = String((((_local_6 * 7) + (_local_8 * 3)) * _arg_1));
            var _local_11:String = (((_local_7 + _local_10.substring(0, 1)) + _local_9) + _local_10.substring(1, _local_10.length));
            return (_local_11);
        }
public function callSaveTime(_arg_1:String):void
        {
            var _local_2:*;
            var _local_3:String;
            var _local_4:String;
            var _local_5:String;
            var _local_6:String;
            if (isInstructions)
            {
                return;
            };
            switch (sysStatus)
            {
                case STATUS_NOMOVIE:
                case STATUS_LOADING:
                case STATUS_TESTING:
                case STATUS_CHECKING:
                    return;
                case STATUS_PAUSED:
                case STATUS_PLAYING:
                case STATUS_PLAYDONE:	// 播放完成后触发的事件
                    _local_2 = studyTime;//将学习时间给变量2
                    if (_arg_1 == SAVE_BUTTON)
                    {
					// 如果用户点击的是保存按钮的话
					// 则学时就是当前学时加上页面时间，但这里似乎用不到的
                        _local_2 = (_local_2 + pageTime);	
                    };
                    if ((Math.round((_local_2 / 60)) - Math.round((oldStudyTime / 60))) < 1)
                    {//Math.round(x:Number) 返回一个与x接近的整数，例如：0.5 = 1 ，1.3 = 1 ，1.8 = 2
					// 
                        if (_arg_1 == SAVE_BUTTON)
                        {
                            Alert.show("学时保存成功。", "提示");
                        };
                        return;
                    };
                    oldStudyTime = _local_2;		// 然并卵，没什么大用啊
                    _local_3 = encrypt(_local_2);	// 这个重要，将学习时间加密
                    _local_4 = encrypt(clickCount);
                    _local_5 = getFixedLengthStr(("" + _local_4.length), 2, "0");
                    _local_6 = ((_local_5 + _local_3) + _local_4);
                    ExternalInterface.call("swfDo_Save", _local_6, createStrProgress(), _arg_1);
                    return;
                default:
                    Alert.show(("系统状态异常：" + sysStatus));
            };
        }